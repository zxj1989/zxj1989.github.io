<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SnowSword BLOG]]></title>
  <link href="http://zxj1989.github.io/atom.xml" rel="self"/>
  <link href="http://zxj1989.github.io/"/>
  <updated>2016-04-12T10:12:34+08:00</updated>
  <id>http://zxj1989.github.io/</id>
  <author>
    <name><![CDATA[SnowSword]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UI Test之:编码篇]]></title>
    <link href="http://zxj1989.github.io/blog/2016/04/12/ui-test-bian-ma-pian/"/>
    <updated>2016-04-12T09:15:41+08:00</updated>
    <id>http://zxj1989.github.io/blog/2016/04/12/ui-test-bian-ma-pian</id>
    <content type="html"><![CDATA[<p>之前我们介绍了如何在项目中加入UI Test，接下来我们将在这篇文章中介绍如何编写一个测试用例，以及一些UI Test相关测试类的常用方法等。</p>

<h2>初识XCTestCase</h2>

<p>当我们创建了一个UI Test Target之后，缺省包含一个继承于XCTestCase的测试类，该类缺省实现了两个父类的方法：</p>

<p>1、- (void)setUp;</p>

<p>该类的每一个测试方法执行之前会调用此方法</p>

<p>2、- (void)tearDown;</p>

<p>该类的每一个测试方法执行完之后会调用此方法</p>

<h2>使用录制功能</h2>

<p>我们写UI Test的测试用例的时候可以使用Xcode提供的录制功能进行界面交互行为的录制生成代码，具体用法如下：</p>

<p>第一步：选择测试文件
，点击录制按钮，如下图所示
<img src="http://7xsms4.com2.z0.glb.clouddn.com/UI%20Test%20Record_1%20.png" alt="UI Test Record" /></p>

<p>第二步：完成第一步操作后，会启动APP，接下来我们开始操作，Xcode会记录并生成对应操作的测试代码</p>

<h2>手动编写代码</h2>

<p>手动编写代码的话我们需要熟悉下面三个类提供的相关API</p>

<p>XCUIApplication</p>

<p>XCUIElement</p>

<p>XCUIElementQuery</p>

<h3>XCUIApplication</h3>

<p>继承于XCUIElement，管理测试应用的启动，和关闭以及获取测试应用的运行环境等</p>

<p>1、- (void)launch;</p>

<p>启动应用</p>

<p>2、- (void)terminate;</p>

<p>关闭应用</p>

<p>3、@property (nonatomic, copy) NSDictionary <NSString *, NSString *> *launchEnvironment;</p>

<h3>XCUIElement</h3>

<p>表示每一个UI界面元素，该类遵循XCUIElementAttributes 和XCUIElementTypeQueryProvider协议。</p>

<p><strong>XCUIElementAttributes</strong> 该类定义了界面元素的元素属性，如：frame、enabled、selected等属性。</p>

<p><strong>XCUIElementTypeQueryProvider</strong> 提供每一类UI元素集合的表示
如buttons表示UIButton的集合，tables表示UITableView的集合等等</p>

<p>1、@property (readonly) BOOL exists;</p>

<p>判断元素是否存在</p>

<p>2、@property (readonly, getter = isHittable) BOOL hittable;</p>

<p>判断元素是否可被点击</p>

<p>3、- (XCUIElementQuery *)descendantsMatchingType:(XCUIElementType)type;</p>

<p>获取匹配对应类型的所有子节点以及子节点的子节点的所有元素的集合</p>

<p>4、- (XCUIElementQuery *)childrenMatchingType:(XCUIElementType)type;</p>

<p>获取匹配类型的所有子节点的元素的集合</p>

<p>5、- (void)typeText:(NSString *)text;</p>

<p>为元素添加文本，改方法需要有键盘焦点</p>

<p>6、- (void)tap;</p>

<p>元素点击</p>

<h3>XCUIElementQuery</h3>

<p>界面元素的集合</p>

<p>1、- (XCUIElement *)elementBoundByIndex:(NSUInteger)index;</p>

<p>获取集合内对应index的元素</p>

<p>2、- (XCUIElement <em>)elementMatchingType:(XCUIElementType)elementType identifier:(nullable NSString </em>)identifier;</p>

<p>获取对应类型和对应标识的元素</p>

<p>3、我们还可以以下标的形式获取对应identity的元素</p>

<p>XCUIApplication *app = [[XCUIApplication alloc] init];
app.buttons[@&ldquo;UI Test Button”]</p>

<h2>运行测试用例</h2>

<p>我们可以使用command + U快捷键运行所有测试用例，也可以点击单个测试方法前面的播放按钮进行单个用例的测试，如下图所示：</p>

<p><img src="http://7xsms4.com2.z0.glb.clouddn.com/UI%20Test%20Record_2.png" alt="UI Test Record Run" /></p>

<p>运行测试用例之后app自动启动，并自动完成代码对应的界面交互操作。
如果测试用例通过测试，对应的测试用例前面会有一个绿色的对勾图标，如果测试用例未通过测试则会有一个红色的叉号。</p>

<p>如果我们设置了continueAfterFailure为NO时当某一个测试用例测试未通过时将会停止执行所有测试用例。</p>

<p>注意：我们在写测试方法的时候方法名必须以test开头，只有以test开头的方法测试框架才会将该方法视为一个测试用例，否则是不会执行该方法的。</p>

<h2>总结</h2>

<p>当前的UI Test只能做一些简单的UI测试，对如scrollView的滑动事件支持bu不好。在测试的过程中还发现偶尔会出现判断存在且可以点击的元素，在执行tap的时候报错，找不到匹配的元素。
录制生成的代码当包含中文时，中文会被转换成被编码的串，需要手动修改。希望在未来的版本中能修复和优化这些问题，开放更多测试的API。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Test初窥]]></title>
    <link href="http://zxj1989.github.io/blog/2016/04/05/ui-testchu-kui/"/>
    <updated>2016-04-05T14:20:34+08:00</updated>
    <id>http://zxj1989.github.io/blog/2016/04/05/ui-testchu-kui</id>
    <content type="html"><![CDATA[<h2>1、关于UI Test</h2>

<p>   UI Test是iOS9加入的一个新的UI测试框架，它可以让我们通过编写代码获取页面元素并与之进行交互，以验证用户界面元素的属性和状态。</p>

<h2>2、在已有项目中使用UI Test</h2>

<p>在iOS9之前，我们创建的项目默认会包含一个（工程名+Tests）的Target，该Target主要是用来做单元测试。主要做一些功能的测试。如果我们需要在已有的老项目中加入UI Test只需要完成下面两个步骤即可：</p>

<h3>第一步：选中Xcode左上角的Test navigator按钮，如下图</h3>

<p><img src="http://7xsms4.com2.z0.glb.clouddn.com/step1.png" alt="MacDown Screenshot" /></p>

<h3>第二步：点击左下角“+”添加按钮，如下图</h3>

<p><img src="http://7xsms4.com2.z0.glb.clouddn.com/step2.png" alt="MacDown Screenshot" /></p>

<p>点击New UI Test Target完成UI Test的添加，添加之后该Target会自带一个UITests类。完成以上步骤即可以开始编写测试代码，进行UI测试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ootopress换电脑写作]]></title>
    <link href="http://zxj1989.github.io/blog/2016/04/01/ootopresshuan-dian-nao-xie-zuo/"/>
    <updated>2016-04-01T15:12:32+08:00</updated>
    <id>http://zxj1989.github.io/blog/2016/04/01/ootopresshuan-dian-nao-xie-zuo</id>
    <content type="html"><![CDATA[<p>进行以下操作的前提是git仓库是按source和master分支进行管理的。
完成以下两步操作即可再另外一台电脑进行写作：</p>

<p>1、将博客的源文件clone到本地的octopress文件夹内</p>

<pre><code> git clone -b source https://github.com/zxj1989/zxj1989.github.io.git octopress
</code></pre>

<p>2、将博客文件clone到octopress的_deploy文件夹内。</p>

<pre><code>cd octopress
git clone https://github.com/zxj1989/zxj1989.github.io.git 
</code></pre>

<p>如果是多台电脑并行写作需要更新源文件</p>

<pre><code>cd octopress
git pull origin source 
cd ./_deploy
git pull origin master
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开篇]]></title>
    <link href="http://zxj1989.github.io/blog/2016/02/15/kai-pian/"/>
    <updated>2016-02-15T10:18:21+08:00</updated>
    <id>http://zxj1989.github.io/blog/2016/02/15/kai-pian</id>
    <content type="html"><![CDATA[<p>万事开头难，先说说写博客的初衷吧<br></p>

<blockquote><p>学习的积累，能力的提升<br>
提升自己的同时，将自己的学习总结分享给别人（予人玫瑰，手留余香）！<br>
之前一直看一些大神的博客，一直羡慕不已，总想着自己要也有一个自己的博客多好（提升逼格，O(∩_∩)O哈哈~）<br></p></blockquote>

<p>于是乎有了SnowSword的博客。希望以后自己能坚持将博客一直写下去。将自己学习到的东西都记录下来。</p>

<p>坚持就是胜利，2016-2-16  勉</p>
]]></content>
  </entry>
  
</feed>
